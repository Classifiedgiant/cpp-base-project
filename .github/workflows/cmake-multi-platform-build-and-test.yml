# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      bump-tag:
        type: boolean
        description: bump git tag
        required: false
        default: false
      bump-version:
        type: choice
        description: Type of git tag bump
        required: true
        options:
        - 'patch'
        - 'minor'
        - 'major'

jobs:

  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # Original values
        #os: [ubuntu-latest, windows-latest]
        # build_type: [Release]
        #c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: windows-latest
        #     c_compiler: clang
          # - os: ubuntu-latest
          #   c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    # - name: Set reusable strings
    #   # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
    #   id: strings
    #   shell: bash
    #   run: |
    #     echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Conan Dependencies
      # Window only config at the moment
      run: >
        conan profile detect &&
        conan install ${{ github.workspace }} --build=missing

    - name: Configure CMake
      run: >
        cmake --preset conan-default

    - name: Build
      run: cmake --build --preset conan-release

  tag-deployment:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3

      # - name: get curr dir
      #   shell: bash
      #   run: echo "$(ls -al ${{github.workspace}})"

      - name: get MAJOR
        shell: bash
        run: MAJOR_VERSION=$(grep -Po "(?<=MAJOR )[0-9]+" ${{github.workspace}}/src/version.txt)
      - name: get MINOR
        run: |
          grep -Eo '(?<=MINOR) [0-9]*' src/version.txt >> "$GITHUB_MINOR_VERSION"
      - name: get PATCH
        run: |
          grep -Eo '(?<=MINOR) [0-9]*' src/version.txt >> "$GITHUB_PATCH_VERSION"
      - name: Increase Tag
        if: ${{ success() && github.event.inputs.bump-tag }}
        run: >
          git tag v${{env.GITHUB_MAJOR_VERSION}}.${{env.GITHUB_MINOR_VERSION}}.${{env.GITHUB_PATCH_VERSION}} && git push origin --tags
      - name: Write tag to file
        run: >
          echo "MAJOR ${{env.GITHUB_MAJOR_VERSION}}\nMINOR${{env.GITHUB_MINOR_VERSION}}\n${{env.GITHUB_PATCH_VERSION}}\n" >> ${{github.workspace}}/src/version.txt

